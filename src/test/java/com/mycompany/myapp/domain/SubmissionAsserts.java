package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SubmissionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubmissionAllPropertiesEquals(Submission expected, Submission actual) {
        assertSubmissionAutoGeneratedPropertiesEquals(expected, actual);
        assertSubmissionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubmissionAllUpdatablePropertiesEquals(Submission expected, Submission actual) {
        assertSubmissionUpdatableFieldsEquals(expected, actual);
        assertSubmissionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubmissionAutoGeneratedPropertiesEquals(Submission expected, Submission actual) {
        assertThat(expected)
            .as("Verify Submission auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubmissionUpdatableFieldsEquals(Submission expected, Submission actual) {
        assertThat(expected)
            .as("Verify Submission relevant properties")
            .satisfies(e -> assertThat(e.getAfm()).as("check afm").isEqualTo(actual.getAfm()))
            .satisfies(e -> assertThat(e.getAdt()).as("check adt").isEqualTo(actual.getAdt()))
            .satisfies(e -> assertThat(e.getLastName()).as("check lastName").isEqualTo(actual.getLastName()))
            .satisfies(e -> assertThat(e.getFirstName()).as("check firstName").isEqualTo(actual.getFirstName()))
            .satisfies(e -> assertThat(e.getFatherName()).as("check fatherName").isEqualTo(actual.getFatherName()))
            .satisfies(e -> assertThat(e.getAcquisitionDate()).as("check acquisitionDate").isEqualTo(actual.getAcquisitionDate()))
            .satisfies(e -> assertThat(e.getLossDate()).as("check lossDate").isEqualTo(actual.getLossDate()))
            .satisfies(e -> assertThat(e.getOrganizationUnit()).as("check organizationUnit").isEqualTo(actual.getOrganizationUnit()))
            .satisfies(e ->
                assertThat(e.getNewOrganizationUnit()).as("check newOrganizationUnit").isEqualTo(actual.getNewOrganizationUnit())
            )
            .satisfies(e -> assertThat(e.getProtocolNumber()).as("check protocolNumber").isEqualTo(actual.getProtocolNumber()))
            .satisfies(e -> assertThat(e.getDecisionDate()).as("check decisionDate").isEqualTo(actual.getDecisionDate()))
            .satisfies(e -> assertThat(e.getPreviousSubmission()).as("check previousSubmission").isEqualTo(actual.getPreviousSubmission()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubmissionUpdatableRelationshipsEquals(Submission expected, Submission actual) {
        assertThat(expected)
            .as("Verify Submission relationships")
            .satisfies(e -> assertThat(e.getPosition()).as("check position").isEqualTo(actual.getPosition()))
            .satisfies(e -> assertThat(e.getGrade()).as("check grade").isEqualTo(actual.getGrade()))
            .satisfies(e -> assertThat(e.getCommitteeName()).as("check committeeName").isEqualTo(actual.getCommitteeName()));
    }
}
